CREATE OR REPLACE PACKAGE order_info_pkg IS
 FUNCTION ship_name_pf  
   (p_basket IN NUMBER)
   RETURN VARCHAR2;
 PROCEDURE basket_info_pp
  (p_basket IN NUMBER,
   p_shop OUT NUMBER,
   p_date OUT DATE);
END;

THANH NGUYEN

CREATE OR REPLACE PACKAGE BODY order_info_pkg IS --THANH NGUYEN
 FUNCTION ship_name_pf  
   (p_basket IN NUMBER)
   RETURN VARCHAR2
  IS
   lv_name_txt VARCHAR2(25);
 BEGIN
  SELECT shipfirstname||' '||shiplastname
   INTO lv_name_txt
   FROM bb_basket
   WHERE idBasket = p_basket;
  RETURN lv_name_txt;
 EXCEPTION
   WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Invalid basket id');
 END ship_name_pf;
 PROCEDURE basket_info_pp
  (p_basket IN NUMBER,
   p_shop OUT NUMBER,
   p_date OUT DATE)
  IS
 BEGIN
   SELECT idshopper, dtordered
    INTO p_shop, p_date
    FROM bb_basket
    WHERE idbasket = p_basket;
 EXCEPTION
   WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Invalid basket id');
 END basket_info_pp;
END;

THANH NGUYEN

--7.2
CREATE OR REPLACE PACKAGE order_info_pkg IS
 FUNCTION ship_name_pf  
   (p_basket IN NUMBER)
   RETURN VARCHAR2;
 PROCEDURE basket_info_pp
  (p_basket IN NUMBER,
   p_shop OUT NUMBER,
   p_date OUT DATE);
END;
THANH NGUYEN

CREATE OR REPLACE PACKAGE BODY order_info_pkg IS --THANH NGUYEN
 FUNCTION ship_name_pf  
   (p_basket IN NUMBER)
   RETURN VARCHAR2
  IS
   lv_name_txt VARCHAR2(25);
 BEGIN
  SELECT shipfirstname||' '||shiplastname
   INTO lv_name_txt
   FROM bb_basket
   WHERE idBasket = p_basket;
  RETURN lv_name_txt;
 EXCEPTION
   WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Invalid basket id');
 END ship_name_pf;
 PROCEDURE basket_info_pp
  (p_basket IN NUMBER,
   p_shop OUT NUMBER,
   p_date OUT DATE)
  IS
 BEGIN
   SELECT idshopper, dtordered
    INTO p_shop, p_date
    FROM bb_basket
    WHERE idbasket = p_basket;
 EXCEPTION
   WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Invalid basket id');
 END basket_info_pp;
END;
THANH NGUYEN

DECLARE
    lv_name_txt VARCHAR2(25);
    p_basket NUMBER := 12;
    p_shop NUMBER(8,2);
    p_date DATE;
BEGIN
    lv_name_txt := ORDER_INFO_PKG.SHIP_NAME_PF(12);
    DBMS_OUTPUT.PUT_LINE(lv_name_txt);
    order_info_pkg.basket_info_pp(P_BASKET, P_SHOP, P_DATE);
    DBMS_OUTPUT.PUT_LINE(P_SHOP);    
    DBMS_OUTPUT.PUT_LINE(P_DATE);
END;

select order_info_pkg.ship_name_pf(idbasket) from bb_basket where idbasket = 12;

THANH NGUYEN   

SET SERVEROUTPUT ON
--Q7.3
CREATE OR REPLACE PACKAGE order_info_pkg IS
 PROCEDURE basket_info_pp
  (p_basket IN NUMBER,
   p_shop OUT NUMBER,
   p_date OUT DATE,
   SHIP_NAME OUT VARCHAR2);
END;

THANH NGUYEN

CREATE OR REPLACE PACKAGE BODY order_info_pkg IS --THANH NGUYEN
 FUNCTION ship_name_pf  
   (p_basket IN NUMBER)
   RETURN VARCHAR2
  IS
   lv_name_txt VARCHAR2(25);
 BEGIN
  SELECT shipfirstname||' '||shiplastname
   INTO lv_name_txt
   FROM bb_basket
   WHERE idBasket = p_basket;
  RETURN lv_name_txt;
 EXCEPTION
   WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Invalid basket id');
 END ship_name_pf;
 PROCEDURE basket_info_pp
  (p_basket IN NUMBER,
   p_shop OUT NUMBER,
   p_date OUT DATE,
   SHIP_NAME OUT VARCHAR2)
  IS
 BEGIN
   SELECT idshopper, dtordered
    INTO p_shop, p_date
    FROM bb_basket
    WHERE idbasket = p_basket;
    SHIP_NAME := SHIP_NAME_PF(P_BASKET);
 EXCEPTION
   WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Invalid basket id');
 END basket_info_pp;
END;
THANH NGUYEN

DECLARE
    P_basket NUMBER := 4;
    p_shop NUMBER(8,2);
    p_date DATE;
    SHIP_NAME VARCHAR2(25);
BEGIN
    ORDER_INFO_PKG.BASKET_INFO_PP(P_BASKET,P_SHOP,P_DATE,SHIP_NAME);
    DBMS_OUTPUT.PUT_LINE(P_BASKET||' '||P_SHOP||' '||P_DATE||' '||SHIP_NAME);
END;
THANH NGUYEN
--7.4
CREATE OR REPLACE PACKAGE LOGIN_PKG IS
 FUNCTION LOG_IN  
   (USERN IN VARCHAR2, PASS IN VARCHAR2)
   RETURN CHAR;
 PROCEDURE REFERENCE_PKG
   (USERN IN VARCHAR2, PASS IN VARCHAR2, S_ID OUT NUMBER , ZIP OUT NUMBER);
END;

THANH NGUYEN

CREATE OR REPLACE PACKAGE BODY LOGIN_PKG IS --THANH NGUYEN
 FUNCTION LOG_IN  
   (USERN IN VARCHAR2, PASS IN VARCHAR2)
   RETURN CHAR
  IS
   VALID CHAR(1);
   U bb_shopper.username%type;
 BEGIN
  SELECT USERNAME INTO U FROM BB_SHOPPER WHERE PASSWORD = PASS;
    VALID := 'Y';
  RETURN VALID;
 EXCEPTION
   WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('N');
 END LOG_IN;
 PROCEDURE REFERENCE_PKG
   (USERN IN VARCHAR2, PASS IN VARCHAR2, S_ID OUT NUMBER , ZIP OUT NUMBER)
 IS 
    SH_ID NUMBER(3);
    CODE NUMBER(5);
 BEGIN
    SELECT IDSHOPPER, SUBSTR(ZIPCODE,1,3) INTO SH_ID, CODE FROM BB_SHOPPER WHERE PASSWORD = PASS;
    S_ID := SH_ID;
    ZIP := CODE;
 END REFERENCE_PKG;   
END;

THANH NGUYEN

DECLARE
    VALID CHAR(1);
    UN VARCHAR2(25) := 'gmal';
    PW VARCHAR2(25) := 'goofy';
    S_ID NUMBER(3);
    ZIP NUMBER(5);
BEGIN
    VALID := LOGIN_PKG.LOG_IN(UN,PW);
    DBMS_OUTPUT.PUT_LINE(VALID);
    LOGIN_PKG.REFERENCE_PKG(UN,PW,S_ID,ZIP);
    DBMS_OUTPUT.PUT_LINE(S_ID||' '||ZIP);
END;
  
THANH NGUYEN


--7.5
CREATE OR REPLACE PACKAGE SHOP_QUERY_PKG IS
 PROCEDURE SHOP_PKG
    (S_ID IN BB_SHOPPER.IDSHOPPER%TYPE, S_NAME OUT BB_SHOPPER.FIRSTNAME%TYPE,
    S_CITY OUT BB_SHOPPER.CITY%TYPE, S_STATE OUT BB_SHOPPER.STATE%TYPE,
    S_PHONE OUT BB_SHOPPER.PHONE%TYPE, S_EMAIL OUT BB_SHOPPER.EMAIL%TYPE);
 PROCEDURE SHOP_PKG
    (S_ID IN BB_SHOPPER.LASTNAME%TYPE, S_NAME OUT BB_SHOPPER.FIRSTNAME%TYPE,
    S_CITY OUT BB_SHOPPER.CITY%TYPE, S_STATE OUT BB_SHOPPER.STATE%TYPE,
    S_PHONE OUT BB_SHOPPER.PHONE%TYPE, S_EMAIL OUT BB_SHOPPER.EMAIL%TYPE);
END;

THANH NGUYEN

CREATE OR REPLACE PACKAGE BODY SHOP_QUERY_PKG IS --THANH NGUYEN
 PROCEDURE SHOP_PKG
    (S_ID IN BB_SHOPPER.IDSHOPPER%TYPE, S_NAME OUT BB_SHOPPER.FIRSTNAME%TYPE,
    S_CITY OUT BB_SHOPPER.CITY%TYPE, S_STATE OUT BB_SHOPPER.STATE%TYPE,
    S_PHONE OUT BB_SHOPPER.PHONE%TYPE, S_EMAIL OUT BB_SHOPPER.EMAIL%TYPE)
 IS 
 BEGIN
    SELECT FIRSTNAME||' '|| LASTNAME, CITY, STATE, PHONE, EMAIL INTO S_NAME, S_CITY, S_STATE, S_PHONE, S_EMAIL
    FROM BB_SHOPPER WHERE IDSHOPPER = S_ID;
 END; 
 PROCEDURE SHOP_PKG
    (S_ID IN BB_SHOPPER.LASTNAME%TYPE, S_NAME OUT BB_SHOPPER.FIRSTNAME%TYPE,
    S_CITY OUT BB_SHOPPER.CITY%TYPE, S_STATE OUT BB_SHOPPER.STATE%TYPE,
    S_PHONE OUT BB_SHOPPER.PHONE%TYPE, S_EMAIL OUT BB_SHOPPER.EMAIL%TYPE)
 IS
 BEGIN
    SELECT FIRSTNAME||' '|| LASTNAME, CITY, STATE, PHONE, EMAIL INTO S_NAME, S_CITY, S_STATE, S_PHONE, S_EMAIL
    FROM BB_SHOPPER WHERE LASTNAME = S_ID;
 END;
END;

THANH NGUYEN

DECLARE --THANH NGUYEN
    S_ID BB_SHOPPER.IDSHOPPER%TYPE := 23;
    S_NAME BB_SHOPPER.FIRSTNAME%TYPE;
    S_CITY BB_SHOPPER.CITY%TYPE;
    S_STATE BB_SHOPPER.STATE%TYPE;
    S_PHONE BB_SHOPPER.PHONE%TYPE;
    S_EMAIL BB_SHOPPER.EMAIL%TYPE;
BEGIN
    SHOP_QUERY_PKG.SHOP_PKG(S_ID, S_NAME, S_CITY, S_STATE, S_PHONE, S_EMAIL);
    DBMS_OUTPUT.PUT_LINE(S_NAME);
    DBMS_OUTPUT.PUT_LINE(S_CITY);
    DBMS_OUTPUT.PUT_LINE(S_STATE);
    DBMS_OUTPUT.PUT_LINE(S_PHONE);
    DBMS_OUTPUT.PUT_LINE(S_EMAIL);
END;

THANH NGUYEN

DECLARE --THANH NGUYEN
    S_ID BB_SHOPPER.LASTNAME%TYPE := 'Ratman';
    S_NAME BB_SHOPPER.FIRSTNAME%TYPE;
    S_CITY BB_SHOPPER.CITY%TYPE;
    S_STATE BB_SHOPPER.STATE%TYPE;
    S_PHONE BB_SHOPPER.PHONE%TYPE;
    S_EMAIL BB_SHOPPER.EMAIL%TYPE;
BEGIN
    SHOP_QUERY_PKG.SHOP_PKG(S_ID, S_NAME, S_CITY, S_STATE, S_PHONE, S_EMAIL);
    DBMS_OUTPUT.PUT_LINE(S_NAME);
    DBMS_OUTPUT.PUT_LINE(S_CITY);
    DBMS_OUTPUT.PUT_LINE(S_STATE);
    DBMS_OUTPUT.PUT_LINE(S_PHONE);
    DBMS_OUTPUT.PUT_LINE(S_EMAIL);
END;
  
THANH NGUYEN

SET SERVEROUTPUT ON